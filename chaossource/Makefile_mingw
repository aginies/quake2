### Chaos Makefile ###

ifneq ($(CONFIG_FILE),)
    include $(CONFIG_FILE)
else
    -include .config
endif

ifdef CONFIG_WINDOWS
    CPU ?= x86
    SYS ?= Win32
else
    ifndef CPU
        CPU := $(shell uname -m | sed -e s/i.86/i386/ -e s/amd64/x86_64/ -e s/sun4u/sparc64/ -e s/arm.*/arm/ -e s/sa110/arm/ -e s/alpha/axp/)
    endif
    ifndef SYS
        SYS := $(shell uname -s)
    endif
endif

ifndef REV
    REV := r1861~5917c5f
endif
ifndef VER
    VER := 1861
endif

CC ?= gcc
WINDRES ?= windres
STRIP ?= strip
RM ?= rm -f
RMDIR ?= rm -rf
MKDIR ?= mkdir -p

CFLAGS ?= -std=gnu99 -O2 -Wall -g -MMD $(INCLUDES) -DNEED_STRLCAT -DNEED_STRLCPY
RCFLAGS ?=
LDFLAGS ?=
LIBS ?=

CFLAGS_g := -iquote./inc

RCFLAGS_g :=

LDFLAGS_g := -shared

ifdef CONFIG_WINDOWS
    # Force i?86-netware calling convention on x86 Windows
    ifeq ($(CPU),x86)
        CONFIG_X86_GAME_ABI_HACK := y
    else
        CONFIG_X86_GAME_ABI_HACK :=
        CONFIG_X86_NO_SSE_MATH := y
    endif

    LDFLAGS_g += -mconsole

    # Mark images as DEP and ASLR compatible
    LDFLAGS_g += -Wl,--nxcompat,--dynamicbase

else
    # Disable x86 features on other arches
    ifneq ($(CPU),i386)
        CONFIG_X86_GAME_ABI_HACK :=
        CONFIG_X86_NO_SSE_MATH := y
    endif

    # Disable Linux features on other systems
    ifneq ($(SYS),Linux)
        CONFIG_NO_ICMP := y
    endif

    # Hide ELF symbols by default
    CFLAGS_g += -fvisibility=hidden

    # Resolve all symbols at link time
    ifeq ($(SYS),Linux)
        LDFLAGS_g += -Wl,--no-undefined
    endif

    CFLAGS_g += -fPIC
endif

ifndef CONFIG_X86_NO_SSE_MATH
    CFLAGS_g += -msse2 -mfpmath=sse
endif

BUILD_DEFS := -DCPUSTRING='"$(CPU)"'
BUILD_DEFS += -DBUILDSTRING='"$(SYS)"'

VER_DEFS := -DREVISION=$(REV)
VER_DEFS += -DVERSION='"$(VER)"'

CONFIG_GAME_BASE ?= baseq2
CONFIG_GAME_DEFAULT ?=
PATH_DEFS := -DBASEGAME='"$(CONFIG_GAME_BASE)"'
PATH_DEFS += -DDEFGAME='"$(CONFIG_GAME_DEFAULT)"'

# System paths
ifndef CONFIG_WINDOWS
    CONFIG_PATH_DATA ?= .
    CONFIG_PATH_LIB ?= .
    CONFIG_PATH_HOME ?=
    PATH_DEFS += -DDATADIR='"$(CONFIG_PATH_DATA)"'
    PATH_DEFS += -DLIBDIR='"$(CONFIG_PATH_LIB)"'
    PATH_DEFS += -DHOMEDIR='"$(CONFIG_PATH_HOME)"'
endif

# windres needs special quoting...
RCFLAGS_g += -DREVISION=$(REV) -DVERSION='\"$(VER)\"'


### Object Files ###
 \

OBJS_g := \
	c_base.o \
	c_botai.o \
	c_botmisc.o \
	c_botnav.o \
	c_cam.o \
	c_item.o \
	c_weapon.o \
	c_effects.o \
    g_cmds.o \
	g_ctf.o \
	gslog.o \
    g_combat.o \
    g_func.o         \
    g_items.o        \
    g_main.o         \
    g_misc.o         \
    g_phys.o         \
    g_save.o         \
    g_spawn.o        \
    g_svcmds.o       \
    g_target.o       \
    g_trigger.o      \
    g_utils.o        \
    g_weapon.o       \
    p_client.o       \
    p_hud.o          \
    lsight.o          \
	m_move.o	\
	strl.o \
	chaos.o \
    p_weapon.o \
	p_menu.o \
	p_view.o \
	l_nocamp.o \
	q_shared.o \
	stdlog.o

### Configuration Options ###

ifdef CONFIG_X86_GAME_ABI_HACK
    CFLAGS_g += -DUSE_GAME_ABI_HACK=1 
endif

ifdef CONFIG_WINDOWS
    # OBJS_g += src/windows/res/baseq2.o
    # System libs
else
    LIBS_g += -lm
endif

### Targets ###

ifdef CONFIG_WINDOWS
    TARG_g := game$(CPU).dll
else
    TARG_g := game$(CPU).so
endif

all: $(TARG_g)

default: all

.PHONY: all default clean strip

# Define V=1 to show command line.
ifdef V
    Q :=
    E := @true
else
    Q := @
    E := @echo
endif

# Temporary build directories
BUILD_g := .baseq2

# Rewrite paths to build directories
OBJS_g := $(patsubst %,$(BUILD_g)/%,$(OBJS_g))

DEPS_g := $(OBJS_g:.o=.d)

-include $(DEPS_g)

clean:
	$(E) [CLEAN]
	$(Q)$(RM) $(TARG_g)
	$(Q)$(RMDIR) $(BUILD_g)

strip: $(TARG_g)
	$(E) [STRIP]
	$(Q)$(STRIP) $(TARG_g)

# ------

$(BUILD_g)/%.o: %.c
	$(E) [CC] $@
	$(Q)$(MKDIR) $(@D)
	$(Q)$(CC) -c $(CFLAGS) $(CFLAGS_g) -o $@ $<

$(BUILD_g)/%.o: %.rc
	$(E) [RC] $@
	$(Q)$(MKDIR) $(@D)
	$(Q)$(WINDRES) $(RCFLAGS) $(RCFLAGS_g) -o $@ $<

$(TARG_g): $(OBJS_g)
	$(E) [LD] $@
	$(Q)$(MKDIR) $(@D)
	$(Q)$(CC) $(LDFLAGS) $(LDFLAGS_g) -o $@ $(OBJS_g) $(LIBS) $(LIBS_g)

